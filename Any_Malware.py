import subprocess
import re
import datetime
import os

print("\nRequest a Malware to Find IoC !!\n")
malname = input()

print("\nKusto Query for \"{}\" malware is being generated. Be patient Baby !!\n".format(malname))

def remove_color_characters(text):
    return re.sub(r'\x1B\[[0-9;]*[mG]', '', text)

def is_valid_ip(ip):
    # Validate if the string is a valid IP address
    ip_pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
    return re.match(ip_pattern, ip) is not None

def extract_domain_or_ip(line):
    # Check if the line is an IP address
    ip_pattern = r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'
    match = re.search(ip_pattern, line)
    if match:
        ip = match.group(0)
        if is_valid_ip(ip):
            return ip  # Return the valid IP address

    # Extract domain from URL
    url_pattern = r'https?://([^/]+)'
    match = re.search(url_pattern, line)
    if match:
        domain = match.group(1)
        # Strip "www." if it exists
        if domain.startswith("www."):
            domain = domain[4:]
        return domain  # Return the domain as is, including all levels
    return None  # Return None if no match

def generate_kusto_query(malname, lines):
    query = []
    query.append("//---------------------Kusto Query for {} IOC  ------------------\n//List all devices that accessed specific url which partially matches selected-string\n\nDeviceNetworkEvents".format(malname))
    first_line = True

    for line in lines:
        if first_line:
            query.append("| where RemoteUrl contains \"{}\"".format(line))
            first_line = False
        else:
            query.append("or RemoteUrl contains \"{}\"".format(line))

    query.append("| project-reorder Timestamp, DeviceName, ActionType, RemoteIP, RemoteUrl, InitiatingProcessFileName, InitiatingProcessCommandLine")
    return "\n".join(query)

output = subprocess.check_output(["malwoverview.py", "-b", "9", "-B", malname]).decode("utf-8")
ioc_lines = [line.strip()[15:] for line in output.splitlines() if "ioc:" in line]
ioc_lines = [remove_color_characters(line) for line in ioc_lines]

output = subprocess.check_output(["malwoverview.py", "-j", "4", "-J", malname]).decode("utf-8")
status_lines = [line.strip()[83:] for line in output.splitlines() if "online" in line or "offline" in line]
status_lines = [remove_color_characters(line) for line in status_lines]

# Extract domains or IPs
lines = [extract_domain_or_ip(line) for line in ioc_lines + status_lines]
lines = [line for line in lines if line is not None]  # Remove None entries
lines = list(set(lines))  # Remove duplicates
lines.sort()

query = generate_kusto_query(malname, lines)

# Ensure the KustoQueries folder exists
output_folder = "KustoQueries"
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

filename = "{}_KustoQuery_{}.txt".format(malname, datetime.datetime.now().strftime("%Y.%m.%d-%H.%M.%S"))

with open(os.path.join(output_folder, filename), "w") as f:
    f.write(query)

print("\nQuery Generated!! Please check \"{}\" in the \"{}\" Folder".format(filename, output_folder))
