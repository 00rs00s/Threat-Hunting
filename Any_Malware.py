import subprocess
import re
import datetime
import os

print("\nRequest a Malware to Find IoC !!\n")
malname = input()

print("\nKusto Query for \"{}\" malware is being generated. Be patient Baby !!\n".format(malname))

def remove_color_characters(text):
    return re.sub(r'\x1B\[[0-9;]*[mG]', '', text)

def is_valid_ip(ip):
    # Validate if the string is a valid IP address
    ip_pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
    return re.match(ip_pattern, ip) is not None

def extract_domain_or_ip(line):
    # Check if the line is an IP address
    ip_pattern = r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'
    match = re.search(ip_pattern, line)
    if match:
        ip = match.group(0)
        if is_valid_ip(ip):
            return 'ip', ip  # Return type and valid IP address

    # Extract domain from URL
    url_pattern = r'https?://([^/]+)'
    match = re.search(url_pattern, line)
    if match:
        domain = match.group(1)
        # Strip "www." if it exists
        if domain.startswith("www."):
            domain = domain[4:]
        return 'domain', domain  # Return type and domain as is, including all domain levels
    return None, None  # Return None if no match

def generate_kusto_query(malname, iocs_ip, iocs_domains):
    query = []
    query.append("//---------------------Kusto Query for {} IOC  ------------------".format(malname))
    query.append("//List all devices that accessed specific URLs or IPs associated with the malware")
    query.append("let iocs_ip = dynamic([{}]);".format(", ".join("\"{}\"".format(ioc) for ioc in iocs_ip)))
    query.append("let ioc_domains = dynamic([{}]);".format(", ".join("\"{}\"".format(ioc) for ioc in iocs_domains)))
    query.append("DeviceNetworkEvents")
    query.append("| where RemoteUrl has_any (ioc_domains) or RemoteIP has_any (iocs_ip)")
    query.append("| project-reorder Timestamp, DeviceName, ActionType, RemoteIP, RemoteUrl, InitiatingProcessFileName, InitiatingProcessCommandLine")
    return "\n".join(query)

# Note: The "malwoverview.py" script is executed directly here, assuming it is in your system's PATH
# and marked as executable. If it is not, you may need to:
# 1. Specify the full path to the script:
#    subprocess.check_output(["/path/to/malwoverview.py", "-b", "9", "-B", malname]).decode("utf-8")
# 2. Explicitly invoke it with Python if the script is not executable or lacks a shebang:
#    subprocess.check_output(["python3", "malwoverview.py", "-b", "9", "-B", malname]).decode("utf-8")
# Ensure "malwoverview.py" is properly installed or available in your environment before running.

output = subprocess.check_output(["malwoverview.py", "-b", "9", "-B", malname]).decode("utf-8")
ioc_lines = [line.strip()[15:] for line in output.splitlines() if "ioc:" in line]
ioc_lines = [remove_color_characters(line) for line in ioc_lines]

output = subprocess.check_output(["malwoverview.py", "-j", "4", "-J", malname]).decode("utf-8")
status_lines = [line.strip()[83:] for line in output.splitlines() if "online" in line or "offline" in line]
status_lines = [remove_color_characters(line) for line in status_lines]

# Extract domains or IPs
iocs_ip = []
iocs_domains = []
for line in ioc_lines + status_lines:
    ioc_type, ioc_value = extract_domain_or_ip(line)
    if ioc_type == 'ip':
        iocs_ip.append(ioc_value)
    elif ioc_type == 'domain':
        iocs_domains.append(ioc_value)

# Remove duplicates and sort
iocs_ip = sorted(list(set(iocs_ip)))
iocs_domains = sorted(list(set(iocs_domains)))

query = generate_kusto_query(malname, iocs_ip, iocs_domains)

# Ensure the KustoQueries folder exists
output_folder = "KustoQueries"
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

filename = "{}_KustoQuery_{}.txt".format(malname, datetime.datetime.now().strftime("%Y.%m.%d-%H.%M.%S"))

with open(os.path.join(output_folder, filename), "w") as f:
    f.write(query)

print("\nQuery Generated!! Please check \"{}\" in the \"{}\" Folder".format(filename, output_folder))
